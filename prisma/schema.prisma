// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TenantType {
  ALANIS_WEB_DEV
  CHERRY_POP_DESIGN
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  PROJECT_MANAGER
  DEVELOPER
  CLIENT
  USER
}

enum ProjectStatus {
  QUOTED
  APPROVED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum SyncStatus {
  PENDING
  SYNCING
  SYNCED
  ERROR
}

enum ActivityType {
  DEVELOPMENT
  DESIGN
  MEETING
  TESTING
  DOCUMENTATION
  OTHER
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  APPROVED
  REJECTED
  EXPIRED
  CONVERTED
}

enum ContactFormStatus {
  PENDING
  RESPONDED
  SPAM
  ARCHIVED
}

model Tenant {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  type        TenantType
  domain      String?     @unique
  settings    Json        @default("{}")
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  users       User[]
  clients     Client[]
  projects    Project[]
  activities  Activity[]
  quotes      Quote[]
  contactForms ContactForm[]

  @@map("tenants")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  avatar        String?
  phone         String?
  lastLoginAt   DateTime?
  
  tenantId      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  refreshTokens RefreshToken[]
  activities    Activity[]
  projectUsers  ProjectUser[]
  timeEntries   TimeEntry[]
  assignedTasks Task[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([email, tenantId])
  @@map("users")
}

model RefreshToken {
  id          String    @id @default(cuid())
  token       String    @unique
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  
  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

model Client {
  id              String    @id @default(cuid())
  name            String
  email           String
  phone           String?
  company         String?
  taxId           String?
  address         Json?
  notes           String?
  isActive        Boolean   @default(true)
  
  tenantId        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  projects        Project[]
  // invoices        Invoice[]  // TODO: Uncomment when Invoice model is created
  
  // Invoice Ninja Integration
  invoiceNinjaId  String?
  syncStatus      SyncStatus @default(PENDING)
  lastSyncAt      DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([tenantId])
  @@index([email])
  @@map("clients")
}

model Project {
  id              String        @id @default(cuid())
  name            String
  description     String?
  status          ProjectStatus @default(QUOTED)
  
  quotedHours     Float
  usedHours       Float         @default(0)
  hourlyRate      Decimal       @db.Decimal(10, 2)
  
  startDate       DateTime?
  endDate         DateTime?
  
  clientId        String
  client          Client        @relation(fields: [clientId], references: [id])
  
  tenantId        String
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  projectUsers    ProjectUser[]
  activities      Activity[]
  timeEntries     TimeEntry[]
  tasks           Task[]
  // invoices        Invoice[]  // TODO: Uncomment when Invoice model is created
  convertedFrom   Quote?
  
  // Metadata
  quotationData   Json?         // Datos del cotizador original
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([tenantId, status])
  @@index([clientId])
  @@map("projects")
}

model ProjectUser {
  id        String   @id @default(cuid())
  
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  role      String   @default("member") // project-specific role
  
  createdAt DateTime @default(now())
  
  @@unique([projectId, userId])
  @@map("project_users")
}

model Activity {
  id          String       @id @default(cuid())
  description String
  type        ActivityType @default(DEVELOPMENT)
  startTime   DateTime
  endTime     DateTime?
  duration    Float?       // in hours
  hourlyRate  Float?
  notes       String?
  
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@index([tenantId])
  @@index([userId])
  @@index([projectId])
  @@index([startTime])
  @@map("activities")
}

model TimeEntry {
  id          String       @id @default(cuid())
  description String
  hours       Float
  date        DateTime     @default(now())
  hourlyRate  Decimal?     @db.Decimal(10, 2)
  notes       String?
  billable    Boolean      @default(true)
  billed      Boolean      @default(false)
  
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  taskId      String?
  task        Task?        @relation(fields: [taskId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@index([projectId])
  @@index([userId])
  @@index([date])
  @@index([billable, billed])
  @@map("time_entries")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  completed   Boolean      @default(false)
  dueDate     DateTime?
  
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assignedToId String?
  assignedTo   User?       @relation(fields: [assignedToId], references: [id])
  
  timeEntries TimeEntry[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@index([projectId])
  @@index([assignedToId])
  @@map("tasks")
}

// Modelo para las cotizaciones web públicas
model Quote {
  id              String        @id @default(cuid())
  quoteNumber     String        @unique
  
  // Información del cliente
  clientName      String
  clientEmail     String
  clientPhone     String?
  clientCompany   String?
  
  // Datos del proyecto cotizado
  projectName     String
  projectType     String        // 'web', 'ecommerce', 'custom', etc.
  description     String?
  
  // Servicios seleccionados (JSON array)
  services        Json          // Array de servicios con configuraciones
  
  // Cálculos
  subtotal        Decimal       @db.Decimal(10, 2)
  tax             Decimal       @db.Decimal(10, 2) @default(0)
  discount        Decimal       @db.Decimal(10, 2) @default(0)
  total           Decimal       @db.Decimal(10, 2)
  
  // Plazos y condiciones
  estimatedHours  Float?
  deliveryDays    Int?
  
  // Estado y seguimiento
  status          QuoteStatus   @default(DRAFT)
  validUntil      DateTime?
  
  // Información adicional
  notes           String?
  internalNotes   String?       // Solo para uso interno
  
  // Conversión a proyecto (opcional)
  projectId       String?       @unique
  convertedProject Project?     @relation(fields: [projectId], references: [id])
  
  // Tenant (para multi-tenancy)
  tenantId        String
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Metadata
  metadata        Json?         // Datos adicionales del cotizador
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([tenantId, status])
  @@index([clientEmail])
  @@index([quoteNumber])
  @@map("quotes")
}

// Modelo para formularios de contacto
model ContactForm {
  id          String            @id @default(cuid())
  name        String
  email       String
  message     String
  phone       String?
  company     String?
  subject     String?
  
  // Metadata
  userAgent   String?
  ipAddress   String?
  source      String?           // 'website', 'admin', etc.
  
  // Estado
  status      ContactFormStatus @default(PENDING)
  response    String?           // Respuesta del admin
  respondedAt DateTime?
  respondedBy String?           // ID del usuario que respondió
  
  tenantId    String
  tenant      Tenant            @relation(fields: [tenantId], references: [id])
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@index([tenantId, status])
  @@index([email])
  @@index([createdAt])
  @@map("contact_forms")
}
